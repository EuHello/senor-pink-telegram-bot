import logging
from datetime import datetime, timedelta
from zoneinfo import ZoneInfo
from botocore.exceptions import ClientError
from boto3.dynamodb.conditions import Key

APP = 'BOT_APP: '


def generate_date_timestamp():
    """
    Provides local date, based on specified timezone, not server timezone.
    Params: n/a

    Returns:
        date: datetime date, Format YYYY-MM-DD.
        time: datetime time, Format HH:MM:SS.ssssss
    """
    today = datetime.now()
    user_dt = today.astimezone(ZoneInfo('Asia/Singapore'))
    return user_dt.date(), user_dt.time()


def get_date_action(command: str):
    """
    Returns date depending on command inputs.

    Params:
        command: str, fixed command words like TODAY or YESTERDAY

    Returns:
        date: datetime date
    """
    today, _ = generate_date_timestamp()
    cmd = command.upper().strip()
    if cmd == 'TODAY':
        return today
    elif cmd == 'YESTERDAY':
        delta = timedelta(days=1)
        return today - delta
    else:
        return None


class Records:
    def __init__(self, dyn_resource):
        """
        Init DynamoDB connection

        Params:
            dyn_resource: boto3.resource

        Docs: https://docs.aws.amazon.com/code-library/latest/ug/python_3_dynamodb_code_examples.html
              https://github.com/awsdocs/aws-doc-sdk-examples/tree/main/python/example_code/dynamodb#code-examples
        """
        self.dyn_resource = dyn_resource
        self.table = None

    def init_table(self, table_name: str):
        """
        Init DynamoDB table

        Params:
            table_name: str, name of DB table
        """
        self.table = self.dyn_resource.Table(table_name)

    def query_records(self, date):
        date = str(date)
        try:
            response = self.table.query(KeyConditionExpression=Key("date").eq(date))
        except ClientError as e:
            logging.error(
                f"{APP}Error querying records. Table={self.table.name}.\n"
                f"date={date}\n"
                f"Error Code={e.response['Error']['Code']}\n"
                f"Error={e.response['Error']['Message']}"
            )
            raise
        else:
            return response["Items"]

    def add_record(self, category: str, amount: int, message: str, author: str):
        """
        PUTS record to DynamoDB. Composite primary key consists of date and timestamp, both generated by a function.

        Params:
            category: str, category of record. e.g. milk
            amount: int, value of measurement e.g. 100 ml
            message: str, text message from the user
            author: str, name of user
        """
        date, timestamp = generate_date_timestamp()
        date, timestamp = str(date), str(timestamp)
        try:
            self.table.put_item(
                Item={
                    'date': date,
                    'timestamp': timestamp,
                    'category': category,
                    'amount': amount,
                    'text': message,
                    'author': author
                }
            )
        except ClientError as e:
            logging.error(
                f"{APP}Error adding a record. Table={self.table.name}.\n"
                f"date={date}\n"
                f"Error Code={e.response['Error']['Code']}\n"
                f"Error={e.response['Error']['Message']}"
            )
            raise
